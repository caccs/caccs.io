message = <<-MESSAGE
## Checklist:
- [ ] Rode os testes localmente
- [ ] Se modificou algo do Front, adicione Screenshots!
- [ ] Realize testes manuais
- [ ] Remova (obviamente depois de programar) todos os TODOs
- [ ] [Rails Security Checklist](https://github.com/brunofacca/zen-rails-security-checklist)
- [ ] [Rails Style Guide](https://github.com/bbatsov/rails-style-guide)
- [ ] [Ruby Style Guide](https://github.com/bbatsov/ruby-style-guide)
MESSAGE

markdown(message)

warn('Ainda é Work in Progress') if github.pr_title.include?('WIP')
warn('Big fucking PR') if git.lines_of_code > 500
if git.modified_files.empty? && git.added_files.empty? && git.deleted_files.empty?
  raise('What is the point of this fucking PR if you didnt changed anything')
end

if git.added_files.include?('db/migrate/*.rb') && !git.modified_files.include?('db/schema.rb')
  warn('Rode `db:migrate` e commite as mudanças do arquivo `schema.rb`')
end

# TODOS

todoist.warn_for_todos
todoist.print_todos_table

# TESTS

has_app_changes = !git.modified_files.grep(/(lib|app)/).empty?
has_test_changes = !git.modified_files.grep(/(spec|test)/).empty?

if has_app_changes && !has_test_changes
  message = <<-MESSAGE
Caso esteja refatorando código, está tudo bem.
Porém, é válido lembrar que caso isto sejam novas features, você deve adicionar testes.
  MESSAGE

  warn(message.strip)
end

# CODE COVERAGE

simplecov.report('coverage/coverage.json')

username = ENV['CIRCLE_PROJECT_USERNAME']
project = ENV['CIRCLE_PROJECT_REPONAME']
build = ENV['CIRCLE_BUILD_NUM']
artifacts = ENV['CIRCLE_ARTIFACTS']
if username && project && build
  # submit message giving the coverage report that was generated by coverage.py
  message("[Code Coverage Report](https://circleci.com/api/v1/project/#{username}/#{project}/#{build}/artifacts/0/#{artifacts}/reports/index.html)")
end
